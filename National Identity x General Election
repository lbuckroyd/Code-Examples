## National Identity x 2019 General Election - Dissertation ##
## Date: 21/04/22

rm(list=ls())
setwd('C:/Users/Lydia/OneDrive - Durham University/Final Year/Dissertation/Coding/Data')

### Load Packages ###

library(tidyverse)
library(haven)
library(readxl)
library(naniar)

### Load Data ###

BES_W17 <- read_sav("BES2019_W17.sav")  ## Load W17 data file (Nov 2019)
BES_W20 <- read_sav("BES2019_W20.sav")  ## Load W20 data file (June 2020)

Results <- read_excel("BES-2019-General-Election-results.xlsx")  ## Load election results for constituency-level controls

### Selecting Columns ###
BES_W17.clean <- BES_W17 %>%    
  select(id,
         country,
         pcon,
         partyId,
         partyIdStrength,
         britishness,
         efficacyTooMuchEffort,
         efficacyNotUnderstand,
         efficacyNoMatter,
         efficacyPolCare,
         gender,
         p_socgrade,
         p_education,
         electionInterest,
         discussPolDays)

BES_W20.clean <- BES_W20 %>%   
  select(id,
         pcon,
         partyId,
         partyIdStrength,
         britishness,
         handleCorona,
  )

### Clean/rename/remove wave data ###

#Removing don't knows for Britishness/Party ID

BES_W17.clean <- BES_W17.clean %>%          ## Replacing don't know/no response with NA
  replace_with_na(replace = list(partyId = c(9999, 10),
                                 partyIdStrength = 9999,
                                 britishness = 9999,
                                 efficacyNoMatter = 9999,
                                 efficacyTooMuchEffort = 9999,
                                 efficacyNotUnderstand = 9999,
                                 efficacyPolCare = 9999,
                                 p_socgrade = c(7, 8),
                                 p_education = c(19, 20),
                                 electionInterest = 9999,
                                 discussPolDays = 9999))

BES_W17.clean <- BES_W17.clean %>%          ## Removing any na values in cleaned columns
  drop_na(partyId, partyIdStrength, britishness)
is.na(BES_W17.clean)

BES_W20.clean <- BES_W20.clean %>%          ## Repeating for W20
  replace_with_na(replace = list(partyId = c(9999, 10),
                                 partyIdStrength = 9999,
                                 britishness = 9999,
                                 handleCorona = 9999))

BES_W20.clean <- BES_W20.clean %>%          
  drop_na(partyId, partyIdStrength, britishness, handleCorona)
is.na(BES_W20.clean)


### Removing non-recurring respondents ###

BES_W17.clean <- BES_W17.clean %>%
  filter(BES_W17.clean$id %in% BES_W20.clean$id)       ## Filter by IDs that occur in both W17 and W20
all(BES_W17.clean$id %in% BES_W20.clean$id)            ## Check non-recurring IDs have been removed

BES_W20.clean <- BES_W20.clean %>%                     ## Repeat for W20
  filter(BES_W20.clean$id %in% BES_W17.clean$id)
all(BES_W20.clean$id %in% BES_W17.clean$id)


### Merging Dataframes ###

BES.clean <- merge(BES_W17.clean, BES_W20.clean, by = 'id')
view(BES.clean)

col_names <- c('id',           ## Renaming columns to distinguish W17 and W20
               'country', 
               'pcon', 
               'partyId_pre', 
               'partyIdStrength_pre', 
               'britishness_pre',
               'efficacyTooMuchEffort',
               'efficacyNotUnderstand',
               'efficacyNoMatter',
               'efficacyPolCare',
               'gender',
               'socgrade',
               'education',
               'electionInterest',
               'freqconversation',
               'pcon_post',
               'partyId_post',
               'partyIdStrength_post',
               'britishness_post',
               'handleCorona')
colnames(BES.clean) <- col_names

### Creating grouped party ID variable ###

BES.clean <- BES.clean %>%
  mutate(partyID = case_when(partyId_pre > 7 ~ 7,
                             partyId_pre == 7 ~ 6,
                             partyId_pre == 6 ~ 7,
                             TRUE ~ as.numeric(partyId_pre)))
table(BES.clean$partyID)

### Renaming country variable ###

BES.clean <- BES.clean %>%
  mutate(country = case_when(country == '1' ~ 'ENG',
                             country == '2' ~ 'SCOT',
                             country == '3' ~ 'WALES',
                             TRUE ~ as.character(country)))
BES.clean <- BES.clean %>%
  mutate(wales = case_when(country == 'WALES' ~ '1',
                           country == 'SCOT' ~ '0',
                           country == 'ENG' ~ '0',
                           TRUE ~ as.character(country)))
BES.clean <- BES.clean %>%
  mutate(scotland = case_when(country == 'WALES' ~ '0',
                              country == 'SCOT' ~ '1',
                              country == 'ENG' ~ '0',
                              TRUE ~ as.character(country)))
BES.clean <- BES.clean %>%
  mutate(england = case_when(country == 'WALES' ~ '0',
                             country == 'SCOT' ~ '0',
                             country == 'ENG' ~ '1',
                             TRUE ~ as.character(country)))

BES.clean$wales <- as.numeric(as.character(BES.clean$wales))
BES.clean$scotland <- as.numeric(as.character(BES.clean$scotland))
BES.clean$england <- as.numeric(as.character(BES.clean$england))


### Create a combined efficacy variable ###

BES.clean <- BES.clean %>%                    
  mutate(efficacy = efficacyTooMuchEffort + 
           efficacyNotUnderstand +
           efficacyNoMatter + 
           efficacyPolCare)

### Creating independent and dependent variables ###

BES.clean <- BES.clean %>%                    ## Creating dependent variable of change in identity
  mutate(id_change = -1*(britishness_pre - britishness_post))

BES.clean <- BES.clean %>%                    ## Creating dummy variable for winning/losing - 1=win, 0=lose
  mutate(winlose_nat = case_when(partyID > 1 ~ 0,
                                 TRUE ~ 1))

################################# Creating constituency results dataset ##############################

BES_con.clean <- BES.clean %>%                     ## Subsetting cases where individual has not moved
  subset(pcon == pcon_post)

BES_con.clean <- merge(BES.clean, Results, by = 'pcon')
view(BES_con.clean)


## Create dummy variables for H2

BES_con.clean <- BES_con.clean %>%          ## Replacing don't know/no response with NA
  replace_with_na(replace = list(Winner19 = 'Speaker'))

BES_con.clean <- BES_con.clean %>%          ## Removing any na values in cleaned columns
  drop_na(Winner19)

BES_con.clean <- BES_con.clean %>%                    ## Creating easier results variable that can be mapped directly to partyID
  mutate(result = case_when(Winner19 == 'CON' ~ '1',
                            Winner19 == 'LAB' ~ '2',
                            Winner19 == 'LD' ~ '3',
                            Winner19 == 'SNP' ~ '4',
                            Winner19 == 'PC' ~ '5',
                            Winner19 == 'G' ~ '6',
                            TRUE ~ as.character(Winner19)))
table(BES_con.clean$result)


BES_con.clean <- BES_con.clean %>%      ##Win-win dummy variable
  mutate(winwin = ifelse(partyID == '1' & result == '1', 1, 0))
table(BES_con.clean$winwin)

BES_con.clean <- BES_con.clean %>%      ##Win-lose dummy variable
  mutate(winlose = ifelse(partyID == '1' & result != '1', 1, 0))
table(BES_con.clean$winlose)

BES_con.clean <- BES_con.clean %>%      ##lose-win dummy variable
  mutate(losewin = ifelse(partyID > '1' & partyID == result, 1, 0))
table(BES_con.clean$losewin)

BES_con.clean <- BES_con.clean %>%      ##lose-lose dummy variable
  mutate(loselose = ifelse(partyID > '1' & partyID != result , 1, 0))
table(BES_con.clean$loselose)


############################ Modelling Regression for National Results ######################################

full.modelH1 <- lm(id_change ~ winlose_nat +             
                     handleCorona +
                     education +
                     freqconversation +
                     partyIdStrength_pre +
                     britishness_pre +
                     scotland +
                     wales +
                     england +
                     gender +
                     socgrade,
                   data = BES_con.clean)
summary(full.modelH1)

stargazer(full.modelH1, type="html",
          covariate.labels = c('Winner (vs. Loser) (Nationally)',
                               'Approval of Government Handling of Coronavirus',
                               'Education',
                               'Frequency of Political Conversations',
                               'Strength of Partisan Identity (Pre-Election)',
                               'Strength of British Identity (Pre-Election)',
                               'Scotland',
                               'Wales',
                               'England',
                               'Gender',
                               'Social Grade'),
          dep.var.labels = 'Change in National Identity',
          out="H1 (all controls).html")

############################### Modelling Regression for National-Constituency Results ######################

H2_controls1 <- lm(id_change ~ winwin +             
                     handleCorona +
                     freqconversation +
                     partyIdStrength_pre +
                     britishness_pre +
                     wales +
                     scotland +
                     education +
                     gender +
                     socgrade +
                     efficacy
                   , data = BES_con.clean)
summary(H2_controls1)

H2_controls2 <- lm(id_change ~ winlose +             
                     handleCorona +
                     freqconversation +
                     partyIdStrength_pre +
                     britishness_pre +
                     wales +
                     scotland +
                     education +
                     gender +
                     socgrade  +
                     efficacy
                   , data = BES_con.clean)
summary(H2_controls2)

H2_controls3 <- lm(id_change ~ losewin +            
                     handleCorona +
                     freqconversation +
                     partyIdStrength_pre +
                     britishness_pre +
                     wales +
                     scotland +
                     education +
                     gender +
                     socgrade  +
                     efficacy
                   , data = BES_con.clean)
summary(H2_controls3)

H2_controls4 <- lm(id_change ~ loselose +             
                     handleCorona +
                     freqconversation +
                     partyIdStrength_pre +
                     britishness_pre +
                     wales +
                     scotland +
                     education +
                     gender +
                     socgrade  +
                     efficacy, data = BES_con.clean)
summary(H2_controls4)

stargazer(H2_controls1, H2_controls2, H2_controls3, H2_controls4, type = 'html',
          covariate.labels = c('Win-Win (National-Constituency)',
                               'Win-Lose (National-Constituency)',
                               'Lose-Win (National-Constituency)',
                               'Lose-Lose (National-Constituency)',
                               'Approval of Government Handling of Coronavirus',
                               'Frequency of Political Conversations',
                               'Strength of Partisan Identity (Pre-Election)',
                               'Strength of British Identity (Pre-Election)',
                               'Wales',
                               'Scotland',
                               'Education',
                               'Gender',
                               'Social Grade'),
          dep.var.labels = 'Change in National Identity',
          out = 'H2 (all controls).html')


######################## Predicting probable effect of national-constituency results interaction ########################

BES_con.clean <- BES_con.clean %>%                      ##Creating grouped variable for H2
  mutate(H2 = case_when(winwin == '1' ~ '1',
                        TRUE ~ as.character(0)))
BES_con.clean <- BES_con.clean %>%
  mutate(H2 = case_when(winlose == '1' ~ '2',
                        TRUE ~ as.character(H2)))
BES_con.clean <- BES_con.clean %>%
  mutate(H2 = case_when(losewin == '1' ~ '3',
                        TRUE ~ as.character(H2)))
BES_con.clean <- BES_con.clean %>%
  mutate(H2 = case_when(loselose == '1' ~ '4',
                        TRUE ~ as.character(H2)))
table(BES_con.clean$H2)

a <- predict(H2_controls1)
b <- predict(H2_controls2)
c <- predict(H2_controls3)
d <- predict(H2_controls4)

predictH2 <- BES_con.clean               ##Adding predicted values to new dataset
predictH2 <- predictH2 %>%
  drop_na(partyIdStrength_pre, 
          handleCorona, 
          country,
          efficacy,
          gender,
          socgrade,
          education,
          freqconversation)
predictH2$id_change_predict1 <- a
predictH2$id_change_predict2 <- b
predictH2$id_change_predict3 <- c
predictH2$id_change_predict4 <- d

predictH2 <- predictH2 %>%               ## Telling R which predicted value to use for each scenario
  mutate(id_change_predict = case_when(H2 == '1' ~ as.character(id_change_predict1),
                                       H2 == '2' ~ as.character(id_change_predict2),
                                       H2 == '3' ~ as.character(id_change_predict3),
                                       H2 == '4' ~ as.character(id_change_predict4),
                                       TRUE ~ as.character(H2)))

predictH2$id_change_predict <- as.numeric(as.character(predictH2$id_change_predict))

H2_predictedchange <- ggplot(predictH2, aes(y = id_change_predict, x = H2, group = H2)) +            ##Creating boxplot using predicted values, confidence = 0.95
  geom_boxplot() +
  scale_x_discrete(breaks = as.numeric(c('1', '2', '3', '4')), labels = as.character(c('Win-Win', 'Win-Lose', 'Lose-Win', 'Lose-Lose'))) +
  scale_y_continuous(breaks = as.numeric(c(-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0)),
                     limits = as.numeric(c(-1.0, 1.0)))+
  geom_hline(yintercept = 0, linetype = 'dashed') +
  labs(y = 'Predicted Change in National Identity', x = 'National-Constituency Election Result')

ggsave("H2 (predicted change).jpg", plot = H2_predictedchange)
